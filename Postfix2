#include <iostream>
#include <cmath>
#include <string>

using namespace std;

const int type1 = 8;
const int type2 = 16;
const int type3 = 32;

template <typename T>
class Stack
{
public:
    T* stack;
    int top;

    Stack(int len)
    {
        stack = new T[len];
        top = 0;
    }

    void push(T cont)
    {
        stack[top++] = cont;
    }

    T pop()
    {
        if (empty())
            throw 2;
        return stack[--top];
    }

    bool empty() const
    {
        return top == 0;
    }
};


class Number
{
public:
    int num;
    bool* binNum;
    int length;

    Number(int num1)
    {
        num = num1;
        length = lengthOfBinNum();
        transformNum();
    }

    Number(const Number& number)
    {
        num = number.num;
        length = number.length;
        binNum = number.binNum;
    }

    Number()
    {
        num = 0;
        length = lengthOfBinNum();
        transformNum();
    }

    int lengthOfBinNum()
    {
        if (num <= 127 && num >= -127)
            return type1;
        else if (num <= 32767 && num >= -32767)
            return type2;
        else if (num <= 2147483647 && num >= -2147483647)
            return type3;
    }


    void transformNum()
    {
        binNum = new bool[length];
        int tmp = num;

        for (int i = length - 1; i >= 0; i--) {
            binNum[i] = (bool)(tmp % 2);
            tmp = tmp / 2;
        }

        if (num < 0) {
            Number ad = Number(1);

            substraction(ad);
            invert();
        }
    }

    void invert()
    {
        for (int i = length - 1; i >= 0; i--) {
            if (binNum[i])
                binNum[i] = 0;
            else
                binNum[i] = 1;
        }
    }

    void sum(Number num)
    {
        if (length != num.length)
            throw 3;

        bool additional = false;

        bool neg = false;
        bool pos = false;

        if (binNum[0] && num.binNum[0])
            neg = true;

        if (!binNum[0] && !num.binNum[0])
            pos = true;

        for (int i = length; i >= 0; i--) {
            if (binNum[i] == 1 && num.binNum[i] == 1) {
                binNum[i] = additional;
                additional = 1;
            }
            else if ((binNum[i] == 0 && num.binNum[i] == 1) || (binNum[i] == 1 && num.binNum[i] == 0)) {
                if (additional)
                    binNum[i] = 0;
                else
                    binNum[i] = 1;
            }
            else {
                binNum[i] = additional;
                additional = 0;
            }
        }

        if ((binNum[0] && pos) || (!binNum[0] && neg))
            throw 1;
    }

    void substraction(Number num)
    {
        Number ad = Number(1);

        num.invert();
        num.sum(ad);
        sum(num);
    }

    void multiplication(Number num)
    {
        if (this->num < 0 && num.num < 0) {
            Number ad = Number(1);
            substraction(ad);
            invert();
            num.num = -(num.num);
            for (int i = 0; i < length; i++)
                num.binNum[i] = binNum[i];
        }
        else if (num.num < 0 && this->num > 0) {
            for (int i = 0; i < length; i++)
                binNum[i] = num.binNum[i];
            int temp = num.num;
            num.num = this->num;
            this->num = temp;
        }
        else
            for (int i = 0; i < length; i++)
                num.binNum[i] = binNum[i];

        for (int i = 0; i < num.num - 1; i++)
            sum(num);

        this->num = decimalNum();
    }

    void outputBinNum()
    {
        for (int i = 0; i < length; i++)
            cout << binNum[i];
    }

    void outputDecimalNum()
    {
        int num = 0;
        bool neg = false;
        if (binNum[0]) {
            Number ad = Number(1);
            substraction(ad);
            invert();
            neg = true;
        }

        for (int i = length - 1, j = 0; i >= 0; i--, j++)
            if (binNum[i] == 1)
                num += int(pow(2, j));

        if (neg)
            cout << -num;
        else
            cout << num;
    }

    int decimalNum()
    {
        int num = 0;
        bool neg = false;
        if (binNum[0]) {
            Number ad = Number(1);
            invert();
            sum(ad);
            neg = true;
        }

        for (int i = length - 1, j = 0; i >= 0; i--, j++)
            if (binNum[i] == 1)
                num += int(pow(2, j));
        
        if (neg)
            return -num;
        else
            return num;
    }
};

class PostfixCalc
{
public:
    const char* expression;
    int len;

    PostfixCalc(const char* expression) {
        this->expression = expression;
        this->len = strlen(expression);
        //checkLine();
    }

    void checkLine()
    {
        for (int i = 0; i < len; i++) {
            if (!(expression[i] == '+' || expression[i] == '-' || expression[i] == '*'))
                if (!((expression[i] >= '0') && (expression[i] <= '9')))
                    throw 4;
        }
    }

    void resultOfPostfixExpression()
    {
        Stack<Number> result = Stack<Number>(len);
        Number ten = Number(10);
        for (int i = 0; i < len; i++) {
            if ((expression[i] == '-') && (expression[i + 1] >= '0') && (expression[i + 1] <= '9')) {
                i++;
                Number num = Number(0);
                result.push(num);
                while ((expression[i] >= '0') && (expression[i] <= '9')) {
                    cout << "first\n";
                    int tmp = -(expression[i++] - '0');
                    Number tmp1 = result.pop();
                    Number tmp2 = Number(tmp);
                    tmp1.multiplication(ten);
                    tmp1.sum(tmp2);
                    tmp1.decimalNum();
                    result.push(tmp1);
                }
            }
            if (expression[i] == '+') {
                Number tmp1 = result.pop();
                Number tmp2 = result.pop();
                tmp2.sum(tmp1);
                result.push(tmp2);
            }
            if (expression[i] == '-') {
                Number tmp1 = result.pop();
                Number tmp2 = result.pop();
                tmp2.substraction(tmp1);
                result.push(tmp2);
            }
            if (expression[i] == '*') {
                Number tmp1 = result.pop();
                Number tmp2 = result.pop();
                tmp2.multiplication(tmp1);
                result.push(tmp2);
            }
            if ((expression[i] >= '0') && (expression[i] <= '9')) {
                cout << "sec\n";
                Number num = Number(0);
                result.push(num);
                while ((expression[i] >= '0') && (expression[i] <= '9')) {
                    int tmp = expression[i++] - '0';
                    Number tmp1 = result.pop();
                    Number tmp2 = Number(tmp);
                    tmp1.multiplication(ten);
                    tmp1.sum(tmp2);
                    tmp1.decimalNum();
                    result.push(tmp1);
                }
            }
        }

        result.pop().outputDecimalNum();
    }
};

int isCorrect() {
    int check;
    do
    {
        cin >> check;
        if (cin.good())
            break;
        else
        {
            cout << "Invalid data!\n";
            cin.clear();
            while (cin.get() != '\n');
        }
    } while (1);
    return check;
}

int main()
{

    try {
        string tmp;
        getline(cin, tmp);
        const char* line = tmp.c_str();

        PostfixCalc expression = PostfixCalc(line);

        expression.resultOfPostfixExpression();
    }
    catch (int e) {
        if (e == 1)
            cout << endl << "Overflow! Output is incorrect\n";
        else if (e == 2)
            cout << endl << "The stack is empty!\n";
        else if (e == 3)
            cout << endl << "Length of this numbers are different\n";
        else if (e == 4)
            cout << endl << "Entered String is incorrect!\n";
    }

    return 0;
}
